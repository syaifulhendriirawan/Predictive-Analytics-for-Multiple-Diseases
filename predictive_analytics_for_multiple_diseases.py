# -*- coding: utf-8 -*-
"""Predictive Analytics for Multiple Diseases.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lzyz2TzfsO8cPK0nRGKKa7WoqxyWS9Nm

# **Data Loading**
"""

from google.colab import drive
drive.mount('/content/drive')

"""### **Data set yang digunakan berasal dari Kaggle [Multiple Disease Prediction](https://www.kaggle.com/datasets/ehababoelnaga/multiple-disease-prediction/data)**"""

import zipfile
import os

zip_file_path = '/content/drive/MyDrive/Multiple Disease Prediction.zip'

# Ekstrak isi file zip
extract_dir = '/content/multiple-disease-prediction'
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

# List semua file yang diekstrak
files = os.listdir(extract_dir)

# Cetak daftar nama file
for file_name in files:
    print(file_name)

"""# **Import Library**"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

"""# **Exploratory Data**"""

df_train = pd.read_csv('/content/multiple-disease-prediction/Blood_samples_dataset_balanced_2(f).csv')
df_test = pd.read_csv('/content/multiple-disease-prediction/blood_samples_dataset_test.csv')

"""## **Train Data**"""

df_train.head()

df_train.info()

df_train.isna().sum()

"""## **Test Data**"""

df_test.head()

df_test.info()

df_test.isna().sum()

"""# **Data Preparation**"""

# Menggabungkan dataset df_train dan df_test

df = pd.concat([df_train, df_test], ignore_index=True)

X = df.drop(columns=['Disease']) # berisi fitur-fitur dari data tanpa kolom 'Disease'
y = df['Disease'] # berisi kolom 'Disease' sebagai target atau label yang akan diprediksi

# Membagi dataset menjadi data pelatihan dan test

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

"""
# **Model Development**"""

# Model Logistic Regression

lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)

# Model Random Forest

rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)

# Model SVM

svm_model = SVC()
svm_model.fit(X_train, y_train)

"""# **Evaluasi Model**"""

results = []

models = [
    ('Logistic Regression', lr_model.predict(X_test)),
    ('Random Forest', rf_model.predict(X_test)),
    ('SVM', svm_model.predict(X_test))
]

for model_name, y_pred in models:
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')

    results.append({
        'Model': model_name,
        'Accuracy': accuracy,
        'Precision': precision,
        'Recall': recall,
        'F1 Score': f1
    })

df_results = pd.DataFrame(results)

print(df_results)

"""Berdasarkan hasil pelatihan model yang dilakukan, dapat disimpulkan bahwa:

*   Model Logistik Regresi memiliki tingkat akurasi sebesar 79.75%, dengan nilai presisi sebesar 79.19%, recall sebesar 79.75%, dan nilai F1 sebesar 79.04%
*   Model Random Forest menunjukkan tingkat akurasi tertinggi, mencapai 95.95%, dengan presisi sebesar 94.95%, recall sebesar 95.95%, dan nilai F1 sebesar 95.32%.
*   Model Support Vector Machine (SVM) juga menunjukkan kinerja yang baik dengan tingkat akurasi sebesar 95.07%, nilai presisi sebesar 93.94%, recall sebesar 95.07%, dan nilai F1 sebesar 94.43%.

Dari kesimpulan tersebut, dapat disimpulkan bahwa Model Random Forest memiliki kinerja terbaik dalam hal akurasi dibandingkan dengan model Logistik Regresi dan SVM.
"""